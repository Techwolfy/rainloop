Simplified build process to reduce dependencies.
--- a/gulpfile.js
+++ b/gulpfile.js
@@ -11,51 +11,39 @@
 		devVersion: '0.0.0',
 		releasesPath: 'build/dist/releases',
 		community: true,
-		watch: false,
-		watchInterval: 1000,
-		googleCompile: false,
 
 		rainloopBuilded: false,
 		destPath: '',
 		cleanPath: '',
-		zipSrcPath: '',
-		zipFile: '',
-		zipFileShort: '',
 
 		paths: {}
 	},
 
-	_ = require('lodash'),
-	fs = require('node-fs'),
+	fs = require('fs'),
+	mkdirp = require('mkdirp'),
 	path = require('path'),
-	notifier = require('node-notifier'),
 	runSequence = require('run-sequence'),
 
 	webpack = require('webpack'),
 	webpackCfgBuilder = require('./webpack.config.builder.js'),
 
-	argv = require('yargs').argv,
-
 	gulp = require('gulp'),
 	concat = require('gulp-concat-util'),
 	header = require('gulp-header'),
-	stripbom = require('gulp-stripbom'),
 	rename = require('gulp-rename'),
 	replace = require('gulp-replace'),
 	uglify = require('gulp-uglify'),
-	notify = require("gulp-notify"),
-	plumber = require('gulp-plumber'),
-	gulpif = require('gulp-if'),
-	eol = require('gulp-eol'),
-	livereload = require('gulp-livereload'),
-	eslint = require('gulp-eslint'),
-	cache = require('gulp-cached'),
 	filter = require('gulp-filter'),
 	expect = require('gulp-expect-file'),
 	chmod = require('gulp-chmod'),
-	gutil = require('gulp-util');
+	gutil = require('gulp-util'),
+
+	autoprefixer = require('gulp-autoprefixer'),
+	less = require('gulp-less'),
+	cleanCss = require('gulp-clean-css'),
+	rimraf = require('rimraf');
 
-cfg.community = !argv.pro;
+cfg.community = true;
 
 // webpack
 function webpackCallback(callback)
@@ -64,25 +52,11 @@
 
 		if (err)
 		{
-			if (cfg.watch)
-			{
-				webpackError(err);
-			}
-			else
-			{
-				throw new gutil.PluginError('webpack', err);
-			}
+			throw new gutil.PluginError('webpack', err);
 		}
 		else if (stats && stats.compilation && stats.compilation.errors && stats.compilation.errors[0])
 		{
-			if (cfg.watch)
-			{
-				_.each(stats.compilation.errors, webpackError);
-			}
-			else
-			{
-				throw new gutil.PluginError('webpack', stats.compilation.errors[0]);
-			}
+			throw new gutil.PluginError('webpack', stats.compilation.errors[0]);
 		}
 
         callback();
@@ -97,11 +71,7 @@
 		gutil.log('[webpack]', err.message || '');
 		gutil.log('[webpack]', '---');
 
-		notifier.notify({
-			'sound': true,
-			'title': 'webpack',
-			'message': err.error ? err.error.toString() : err.message
-		});
+		throw new gutil.PluginError('webpack', err.error ? err.error.toString() : err.message);
 	}
 }
 
@@ -110,56 +80,11 @@
 	return !cfg.community ? head.rainloop : head.agpl;
 }
 
-function zipDir(sSrcDir, sDestDir, sFileName)
-{
-	return gulp.src(sSrcDir + '**/*')
-		.pipe(require('gulp-zip')(sFileName))
-		.pipe(gulp.dest(sDestDir));
-}
-
 function cleanDir(sDir)
 {
-	return gulp.src(sDir, {read: false})
-		.pipe(require('gulp-rimraf')());
-}
-
-function copyFile(sFile, sNewFile, callback)
-{
-	fs.writeFileSync(sNewFile, fs.readFileSync(sFile));
-	callback();
-}
-
-function signFile(sFile, callback)
-{
-	var exec = require('child_process').exec;
-	exec('gpg2 --openpgp -u 87DA4591 -a -b ' + sFile, function(err) {
-		if (err) {
-			gutil.log('gpg error: skip');
-		}
-		callback();
-	});
+	return rimraf.sync(sDir);
 }
 
-function signFileTask(callback) {
-	if (argv.sign)
-	{
-		signFile(cfg.destPath + cfg.zipFile, function() {
-			if (cfg.zipFileShort)
-			{
-				signFile(cfg.destPath + cfg.zipFileShort, callback);
-			}
-			else
-			{
-				callback();
-			}
-		});
-	}
-	else
-	{
-		callback();
-	}
-};
-
 cfg.paths.globjs = 'dev/**/*.js';
 cfg.paths.static = 'rainloop/v/' + cfg.devVersion + '/static/';
 cfg.paths.staticJS = 'rainloop/v/' + cfg.devVersion + '/static/js/';
@@ -174,7 +99,6 @@
 cfg.paths.less = {
 	main: {
 		src: 'dev/Styles/@Main.less',
-		watch: ['dev/Styles/*.less'],
 		options: {
 			paths: [
 				path.join(__dirname, 'dev', 'Styles'),
@@ -221,7 +145,7 @@
 	libs: {
 		name: 'libs.js',
 		src: [
-			'/usr/share/javascript/jquery/jquery.min.js',
+			'debian/lib/jquery/jquery.min.js',
 			'/usr/share/javascript/jquery-mousewheel/jquery.mousewheel.js',
 			'debian/lib/jquery-scrollstop/jquery.scrollstop.js',
 			'/usr/share/javascript/jquery-lazyload/jquery.lazyload.js ',
@@ -266,7 +190,7 @@
 };
 
 
-// assers
+// assets
 
 gulp.task('assets:clean', function() {
 	return cleanDir(cfg.paths.static);
@@ -284,15 +208,12 @@
 });
 
 gulp.task('css:main', ['assets'], function() {
-	var autoprefixer = require('gulp-autoprefixer'),
-		less = require('gulp-less'),
-		lessFilter = filter('**/*.less', {restore: true}),
+	var lessFilter = filter('**/*.less', {restore: true}),
 		src = cfg.paths.css.main.src.concat([cfg.paths.less.main.src]);
 
 	return gulp.src(src)
 		.pipe(expect.real({errorOnFailure: true}, src))
 		.pipe(lessFilter)
-		.pipe(gulpif(cfg.watch, plumber({errorHandler: notify.onError("Error: <%= error.message %>")})))
 		.pipe(less({
 			'paths': cfg.paths.less.main.options.paths
 		}))
@@ -300,38 +221,30 @@
 		.pipe(concat(cfg.paths.css.main.name))
 		.pipe(autoprefixer('last 3 versions', 'ie >= 9', 'Firefox ESR'))
 		.pipe(replace(/\.\.\/(img|images|fonts|svg)\//g, '$1/'))
-		.pipe(eol('\n', true))
-		.pipe(gulp.dest(cfg.paths.staticCSS))
-		.pipe(livereload());
+		.pipe(gulp.dest(cfg.paths.staticCSS));
 });
 
 gulp.task('css:social', function() {
-	var autoprefixer = require('gulp-autoprefixer'),
-		src = cfg.paths.css.social.src;
+	var src = cfg.paths.css.social.src;
 	return gulp.src(src)
 		.pipe(expect.real({errorOnFailure: true}, src))
 		.pipe(concat(cfg.paths.css.social.name))
 		.pipe(autoprefixer('last 3 versions', 'ie >= 9', 'Firefox ESR'))
 		.pipe(replace(/\.\.\/(img|images|fonts|svg)\//g, '$1/'))
-		.pipe(eol('\n', true))
 		.pipe(gulp.dest(cfg.paths.staticCSS));
 });
 
 gulp.task('css:main:min', ['css:main'], function() {
-	var cleanCss = require('gulp-clean-css');
 	return gulp.src(cfg.paths.staticCSS + cfg.paths.css.main.name)
 		.pipe(cleanCss())
 		.pipe(rename({suffix: '.min'}))
-		.pipe(eol('\n', true))
 		.pipe(gulp.dest(cfg.paths.staticCSS));
 });
 
 gulp.task('css:social:min', ['css:social'], function() {
-	var cleanCss = require('gulp-clean-css');
 	return gulp.src(cfg.paths.staticCSS + cfg.paths.css.social.name)
 		.pipe(cleanCss())
 		.pipe(rename({suffix: '.min'}))
-		.pipe(eol('\n', true))
 		.pipe(gulp.dest(cfg.paths.staticCSS));
 });
 
@@ -353,7 +266,6 @@
 	return gulp.src(src)
 		.pipe(expect.real({errorOnFailure: true}, src))
 		.pipe(concat(cfg.paths.js.libs.name, {separator: '\n\n'}))
-		.pipe(eol('\n', true))
 		.pipe(replace(/sourceMappingURL=[a-z0-9\.\-_]{1,20}\.map/ig, ''))
 		.pipe(gulp.dest(cfg.paths.staticJS));
 });
@@ -369,7 +281,6 @@
 gulp.task('js:app', ['js:webpack'], function() {
 	return gulp.src(cfg.paths.staticJS + cfg.paths.js.app.name)
 		.pipe(header(getHead() + '\n'))
-		.pipe(eol('\n', true))
 		.pipe(gulp.dest(cfg.paths.staticJS))
 		.on('error', gutil.log);
 });
@@ -377,13 +288,12 @@
 gulp.task('js:admin', ['js:webpack'], function() {
 	return gulp.src(cfg.paths.staticJS + cfg.paths.js.admin.name)
 		.pipe(header(getHead() + '\n'))
-		.pipe(eol('\n', true))
 		.pipe(gulp.dest(cfg.paths.staticJS))
 		.on('error', gutil.log);
 });
 
 // - min
-gulp.task('js:min', ['js:app', 'js:admin'], function() {
+gulp.task('js:min', ['js:app', 'js:admin', 'js:libs'], function() {
 	return gulp.src(cfg.paths.staticJS + '*.js')
 		.pipe(replace(/"rainloop\/v\/([^\/]+)\/static\/js\/"/g, '"rainloop/v/$1/static/js/min/"'))
 		.pipe(rename({suffix: '.min'}))
@@ -392,23 +302,10 @@
 			compress: true,
 			'screw-ie8': true
 		}))
-		.pipe(eol('\n', true))
 		.pipe(gulp.dest(cfg.paths.staticMinJS))
 		.on('error', gutil.log);
 });
 
-// lint
-gulp.task('js:eslint', function() {
-	return gulp.src(cfg.paths.globjs)
-		.pipe(cache('eslint'))
-		.pipe(eslint())
-		.pipe(gulpif(cfg.watch, plumber({errorHandler: notify.onError("Error: <%= error.message %>")})))
-		.pipe(eslint.format())
-		.pipe(eslint.failAfterError());
-});
-
-gulp.task('js:validate', ['js:eslint']);
-
 // other
 gulp.task('lightgallery-fonts:clear', function() {
 	return cleanDir('rainloop/v/' + cfg.devVersion + '/static/css/fonts/lg.*');
@@ -418,6 +315,10 @@
 	return cleanDir('rainloop/v/' + cfg.devVersion + '/static/css/fonts/rainloop.*');
 });
 
+gulp.task('openpgp:clear', function() {
+	return cleanDir('rainloop/v/' + cfg.devVersion + '/static/js/min/openpgp.*');
+});
+
 gulp.task('lightgallery-fonts:copy', ['lightgallery-fonts:clear'], function() {
 	return gulp.src('debian/lib/lightgallery/fonts/lg.*')
 		.pipe(gulp.dest('rainloop/v/' + cfg.devVersion + '/static/css/fonts'));
@@ -428,8 +329,14 @@
 		.pipe(gulp.dest('rainloop/v/' + cfg.devVersion + '/static/css/fonts'));
 });
 
+gulp.task('openpgp:copy', ['openpgp:clear'], function() {
+	return gulp.src(['debian/lib/openpgp/openpgp.min.js', 'debian/lib/openpgp/openpgp.worker.min.js'])
+		.pipe(gulp.dest('rainloop/v/' + cfg.devVersion + '/static/js/min'));
+});
+
 gulp.task('lightgallery', ['lightgallery-fonts:copy']);
 gulp.task('fontastic', ['fontastic-fonts:copy']);
+gulp.task('openpgp', ['openpgp:copy']);
 
 gulp.task('ckeditor:clear', function() {
 	return cleanDir('rainloop/v/' + cfg.devVersion + '/static/ckeditor');
@@ -447,7 +354,6 @@
 
 gulp.task('ckeditor', ['ckeditor:copy-plugins', 'ckeditor:copy', 'ckeditor:clear'], function () {
 	return gulp.src('rainloop/v/' + cfg.devVersion + '/static/ckeditor/*.js')
-		.pipe(stripbom())
 		.pipe(header("\uFEFF")) // BOM
 		.pipe(gulp.dest('rainloop/v/' + cfg.devVersion + '/static/ckeditor'));
 });
@@ -460,9 +366,9 @@
 		dist = cfg.releasesPath + '/webmail/' + versionFull + '/src/'
 	;
 
-	fs.mkdirSync(dist, '0777', true);
+	mkdirp.sync(dist, 0o755);
 	fs.mkdirSync(dist + 'data');
-	fs.mkdirSync(dist + 'rainloop/v/' + versionFull, '0777', true);
+	mkdirp.sync(dist + 'rainloop/v/' + versionFull, 0o755);
 
 	return gulp.src('rainloop/v/' + cfg.devVersion + '/**/*', {base: 'rainloop/v/' + cfg.devVersion})
 		.pipe(chmod(0o644, 0o755))
@@ -486,7 +392,7 @@
 
 	if (cfg.community)
 	{
-		require('rimraf').sync(dist + 'rainloop/v/' + versionFull + '/app/libraries/RainLoop/Providers/Prem.php');
+		rimraf.sync(dist + 'rainloop/v/' + versionFull + '/app/libraries/RainLoop/Providers/Prem.php');
 	}
 
 	cfg.destPath = cfg.releasesPath + '/webmail/' + versionFull + '/';
@@ -498,131 +404,22 @@
 	cfg.rainloopBuilded = true;
 });
 
-gulp.task('rainloop:zip', ['rainloop:copy', 'rainloop:setup'], function() {
-	return (cfg.destPath && cfg.zipSrcPath && cfg.zipFile) ?
-		zipDir(cfg.zipSrcPath, cfg.destPath, cfg.zipFile) : false;
-});
-
 gulp.task('rainloop:clean', ['rainloop:copy', 'rainloop:setup', 'rainloop:zip'], function() {
 	return (cfg.cleanPath) ? cleanDir(cfg.cleanPath) : false;
 });
 
-gulp.task('rainloop:shortname', ['rainloop:zip'], function(callback) {
-	copyFile(cfg.destPath + cfg.zipFile, cfg.destPath + cfg.zipFileShort, callback);
-});
-
-gulp.task('rainloop:sign', ['rainloop:shortname'], signFileTask);
-
-// build (OwnCloud)
-gulp.task('rainloop:owncloud:copy', function() {
-
-	var
-		versionFull = pkg.ownCloudPackageVersion,
-		dist = cfg.releasesPath + '/owncloud/' + versionFull + '/src/'
-	;
-
-	fs.mkdirSync(dist, '0777', true);
-	fs.mkdirSync(dist + 'rainloop', '0777', true);
-
-	return gulp.src('build/owncloud/rainloop-app/**/*', {base: 'build/owncloud/rainloop-app/'})
-		.pipe(gulp.dest(dist + 'rainloop'));
-});
-
-gulp.task('rainloop:owncloud:copy-rainloop', ['rainloop:start', 'rainloop:owncloud:copy'], function() {
-
-	var
-		versionFull = pkg.ownCloudPackageVersion,
-		dist = cfg.releasesPath + '/owncloud/' + versionFull + '/src/rainloop/'
-	;
-
-	if (cfg.rainloopBuilded && cfg.destPath)
-	{
-		return gulp.src(cfg.destPath + '/src/**/*', {base: cfg.destPath + '/src/'})
-			.pipe(gulp.dest(dist + 'app/'));
-	}
-
-	return true;
-});
-
-gulp.task('rainloop:owncloud:copy-rainloop:clean', ['rainloop:owncloud:copy-rainloop'], function() {
-	return (cfg.cleanPath) ? cleanDir(cfg.cleanPath) : false;
-});
-
-gulp.task('rainloop:owncloud:setup', ['rainloop:owncloud:copy', 'rainloop:owncloud:copy-rainloop'], function() {
-
-	var
-		versionFull = pkg.ownCloudPackageVersion,
-		dist = cfg.releasesPath + '/owncloud/' + versionFull + '/src/'
-	;
-
-	fs.writeFileSync(dist + 'rainloop/appinfo/info.xml',
-		fs.readFileSync(dist + 'rainloop/appinfo/info.xml', 'utf8')
-			.replace('<version>0.0</version>', '<version>' + versionFull + '</version>')
-			.replace('<licence></licence>', '<licence>' + (cfg.community ? 'AGPLv3' : 'RainLoop Software License') + '</licence>')
-		);
-
-	fs.writeFileSync(dist + 'rainloop/appinfo/version', versionFull);
-	fs.writeFileSync(dist + 'rainloop/VERSION', versionFull);
-
-	cfg.destPath = cfg.releasesPath + '/owncloud/' + versionFull + '/';
-	cfg.cleanPath = dist;
-	cfg.zipSrcPath = dist;
-	cfg.zipFile = 'rainloop-owncloud-app-' + (cfg.community ? '' : 'standard-') + versionFull + '.zip';
-	cfg.zipFileShort = 'rainloop' + (cfg.community ? '' : '-standard') + '.zip';
-});
-
-gulp.task('rainloop:owncloud:zip', ['rainloop:owncloud:copy', 'rainloop:owncloud:setup'], function() {
-	return (cfg.destPath && cfg.zipSrcPath && cfg.zipFile) ?
-		zipDir(cfg.zipSrcPath, cfg.destPath, cfg.zipFile) : false;
-});
-
-gulp.task('rainloop:owncloud:clean', ['rainloop:owncloud:copy', 'rainloop:owncloud:setup', 'rainloop:owncloud:zip'], function() {
-	return (cfg.cleanPath) ? cleanDir(cfg.cleanPath) : false;
-});
-
-gulp.task('rainloop:owncloud:shortname', ['rainloop:owncloud:zip'], function(callback) {
-	copyFile(cfg.destPath + cfg.zipFile, cfg.destPath + cfg.zipFileShort, callback);
-});
-
-gulp.task('rainloop:owncloud:sign', ['rainloop:owncloud:shortname'], signFileTask);
-
 // main
 gulp.task('moment', ['moment:locales']);
-gulp.task('js', ['js:libs', 'js:min', 'js:validate']);
+gulp.task('js', ['js:min']);
 gulp.task('css', ['css:min']);
 
-gulp.task('vendors', ['moment', 'ckeditor', 'fontastic', 'lightgallery']);
+gulp.task('vendors', ['moment', 'ckeditor', 'fontastic', 'lightgallery', 'openpgp']);
 
 gulp.task('clean', ['js:clean', 'css:clean', 'assets:clean']);
 
 gulp.task('rainloop:start', ['rainloop:copy', 'rainloop:setup']);
 
-gulp.task('rainloop', ['rainloop:start', 'rainloop:zip', 'rainloop:clean', 'rainloop:shortname', 'rainloop:sign']);
-
-gulp.task('owncloud', ['rainloop:owncloud:copy',
-	'rainloop:owncloud:copy-rainloop', 'rainloop:owncloud:copy-rainloop:clean',
-	'rainloop:owncloud:setup', 'rainloop:owncloud:zip', 'rainloop:owncloud:clean', 'rainloop:owncloud:shortname', 'rainloop:owncloud:sign']);
-
 // default
 gulp.task('default', function(callback) {
 	runSequence('clean', ['js', 'css', 'vendors'], callback);
 });
-
-// watch
-gulp.task('watch', ['css:main', 'js:validate'], function() {
-	cfg.watch = true;
-	livereload.listen();
-	gulp.watch(cfg.paths.less.main.watch, {interval: cfg.watchInterval}, ['css:main']);
-	gulp.watch(cfg.paths.globjs, {interval: cfg.watchInterval}, ['js:validate']);
-});
-
-// aliases
-gulp.task('build', ['rainloop']);
-
-gulp.task('d', ['default']);
-gulp.task('w', ['watch']);
-gulp.task('l', ['js:libs']);
-gulp.task('v', ['js:validate']);
-
-gulp.task('b', ['build']);
-gulp.task('o', ['owncloud']);
--- a/package.json
+++ b/package.json
@@ -54,48 +54,27 @@
   ],
   "devDependencies": {
     "babel-core": "6.24.1",
-    "babel-eslint": "7.2.3",
     "babel-loader": "7.0.0",
     "babel-plugin-transform-decorators-legacy": "1.3.4",
     "babel-plugin-transform-runtime": "6.23.0",
     "babel-preset-env": "1.4.0",
     "babel-preset-stage-0": "6.24.1",
     "babel-runtime": "6.23.0",
-    "copy-webpack-plugin": "4.0.1",
-    "eslint": "3.19.0",
-    "eslint-plugin-compat": "1.0.2",
     "gulp": "3.9.1",
     "gulp-autoprefixer": "3.1.1",
-    "gulp-cached": "1.1.1",
     "gulp-chmod": "2.0.0",
     "gulp-clean-css": "3.0.4",
     "gulp-concat-util": "0.5.5",
-    "gulp-eol": "0.1.2",
-    "gulp-eslint": "3.0.1",
     "gulp-expect-file": "0.0.7",
     "gulp-filter": "5.0.0",
     "gulp-header": "1.8.8",
-    "gulp-if": "2.0.2",
     "gulp-less": "3.3.0",
-    "gulp-livereload": "3.8.1",
-    "gulp-notify": "3.0.0",
-    "gulp-plumber": "1.1.0",
     "gulp-rename": "1.2.2",
     "gulp-replace": "0.5.4",
-    "gulp-rimraf": "0.2.1",
-    "gulp-stripbom": "1.0.4",
-    "gulp-through": "0.4.0",
     "gulp-uglify": "2.1.2",
-    "gulp-util": "3.0.8",
-    "gulp-zip": "4.0.0",
-    "json-loader": "0.5.4",
-    "node-fs": "0.1.7",
-    "node-notifier": "5.1.2",
     "raw-loader": "0.5.1",
-    "rimraf": "2.6.1",
     "run-sequence": "1.2.2",
     "style-loader": "0.16.1",
-    "webpack": "2.4.1",
-    "webpack-notifier": "1.5.0"
+    "webpack": "2.4.1"
   }
 }
--- a/webpack.config.builder.js
+++ b/webpack.config.builder.js
@@ -3,8 +3,6 @@
 	path = require('path'),
 	webpack = require('webpack'),
 	devPath = path.resolve(__dirname, 'dev'),
-	CopyWebpackPlugin = require('copy-webpack-plugin'),
-	WebpackNotifierPlugin = require('webpack-notifier'),
 	loose = true;
 
 process.noDeprecation = true;
@@ -28,12 +26,7 @@
 				'process.env': {
 					NODE_ENV: '"production"'
 				}
-			}),
-			new WebpackNotifierPlugin(),
-			new CopyWebpackPlugin([
-				{from: 'debian/lib/openpgp/openpgp.min.js', to: 'js/min/openpgp.min.js'},
-				{from: 'debian/lib/openpgp/openpgp.worker.min.js', to: 'js/min/openpgp.worker.min.js'}
-			])
+			})
 		],
 		resolve: {
 			modules: [devPath, 'node_modules'],
